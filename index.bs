<pre class="metadata">
Title: WebVR
Status: ED
ED: https://github.com/mozvr/webvr-spec/
Shortname: webvr
Level: 1
Editor: Vladimir Vukicevic, Mozilla https://mozilla.org/, vladimir@mozilla.com
Editor: Brandon Jones, Google http://google.com/, bajones@google.com
Editor: Kearwood Gilbert, Mozilla https://mozilla.org/, kgilbert@mozilla.com
Editor: Chris Van Wiemeersch, Mozilla https://mozilla.org/, cvan@mozilla.com
Abstract: This specification describes support for accessing virtual reality devices, including sensors and head-mounted displays on the Web.
Repository: mozvr/webvr-spec
Mailing List: web-vr-discuss@mozilla.org
Mailing List Archives: https://mail.mozilla.org/pipermail/web-vr-discuss/
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/hr-time/
    type: typedef; text: DOMHighResTimeStamp
    type: dfn; text: timestamp origin
</pre>

# Introduction # {#intro}

Hardware that enables Virtual Reality applications requires high-precision, low-latency interfaces to deliver an acceptable experience.
Other interfaces, such as device orientation events, can be repurposed to surface VR input but doing so dilutes the interface's original
intent and often does not provide the precision necessary for high-quality VR. The WebVR API provides purpose-built interfaces
to VR hardware to allow developers to build compelling, comfortable VR experiences.


# DOM Interfaces # {#dom}

This section describes the interfaces and functionality added to the DOM to support runtime access to the functionality described above.

## VRDisplay ## {#vrdisplay}

The {{VRDisplay}} interface forms the base of all VR devices supported by this API. It includes generic information such as device IDs and descriptions.

<pre class="idl">
interface VRDisplay {
  readonly attribute DOMString hardwareUnitId;
  readonly attribute DOMString deviceId;
  readonly attribute DOMString deviceName;
};
</pre>

### Attributes ### {#vrdisplay-attributes}

<dfn attribute for="VRDisplay">hardwareUnitId</dfn>
An identifier for the distinct hardware unit that this {{VRDisplay}} is a part
of. Any {{VRDisplay}} that comes from the same physical piece of hardware will
have the same {{hardwareUnitId}}.

<dfn attribute for="VRDisplay">deviceId</dfn>
An identifier for this distinct sensor/device on a physical hardware device.
This shouldn't change across browser restarts, allowing configuration data to be
saved based on it.

<dfn attribute for="VRDisplay">deviceName</dfn>
A user-readable name identifying the device.

## VREye ## {#vreye}

<pre class="idl">
enum VREye {
  "left",
  "right"
};
</pre>

## VRFieldOfView ## {#vrfieldofview}

The {{VRFieldOfView}} interface represents a field of view, as given by 4 degrees describing the view from a center point.

<pre class="idl">
interface VRFieldOfViewReadOnly {
  readonly attribute double upDegrees;
  readonly attribute double rightDegrees;
  readonly attribute double downDegrees;
  readonly attribute double leftDegrees;
};

interface VRFieldOfView : VRFieldOfViewReadOnly {
  inherit attribute double upDegrees;
  inherit attribute double rightDegrees;
  inherit attribute double downDegrees;
  inherit attribute double leftDegrees;
};

dictionary VRFieldOfViewInit {
  double upDegrees = 0.0;
  double rightDegrees = 0.0;
  double downDegrees = 0.0;
  double leftDegrees = 0.0;
};
</pre>

<div class="example">
The following code snippet creates a WebGL-compatible projection matrix from a
{{VRFieldOfView}}.

<pre class="lang-js">
function fieldOfViewToProjectionMatrix (fov, zNear, zFar) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);

  var out = new Float32Array(16);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = ((upTan - downTan) * yScale * 0.5);
  out[10] = -(zNear + zFar) / (zFar - zNear);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = -(2.0 * zFar * zNear) / (zFar - zNear);
  out[15] = 0.0;

  return out;
}
</pre>
</div>

## VRPose ## {#vrpose}

The VRPose interface represents a sensor's state at a given timestamp.

<pre class="idl">
interface VRPose {
  readonly attribute DOMHighResTimeStamp timestamp;

  readonly attribute unsigned long frameID;

  readonly attribute Float32Array? position;
  readonly attribute Float32Array? linearVelocity;
  readonly attribute Float32Array? linearAcceleration;

  readonly attribute Float32Array? orientation;
  readonly attribute Float32Array? angularVelocity;
  readonly attribute Float32Array? angularAcceleration;
};
</pre>

### Attributes ### {#vrpose-state-attributes}

<dfn attribute for="VRPose">timestamp</dfn>
Monotonically increasing value that allows the author to determine if position
state data been updated from the hardware. Since values are monotonically
increasing, they can be compared to determine the ordering of updates, as newer
values will always be greater than or equal to older values.

<dfn attribute for="VRPose">frameID</dfn>
Unique identifier of the frame that will be rendered with this pose.

<dfn attribute for="VRPose">position</dfn>

Position of the sensor at {{timestamp}} as a 3D vector. Position is given in
meters from an origin point, which is either the position the sensor was first
read at or the position of the sensor at the point that <code>resetPose</code> was last
called. The coordinate system uses these axis definitions:
<ul>
 <li>Positive X is to the user's right.</li>
 <li>Positive Y is up.</li>
 <li>Positive Z is behind the user.</li>
</ul>
All positions are given relative to the identity orientation, a sitting space. Transforming this point with <code>VRStageParameters.sittingToStandingTransform</code> converts this to standing space. The w component MUST be 0. May be null if the sensor is incapable of providing positional data.

<dfn attribute for="VRPose">linearVelocity</dfn>
Linear velocity of the sensor at {{timestamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing linear velocity.

<dfn attribute for="VRPose">linearAcceleration</dfn>
Linear acceleration of the sensor at {{timestamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing linear acceleration.

<dfn attribute for="VRPose">orientation</dfn>
Orientation of the sensor at {{timestamp}} as a quaternion. The orientation yaw
(rotation around the Y axis) is relative to the initial yaw of the sensor when
it was first read or the yaw of the sensor at the point that <code>resetPose</code> was
last called. An orientation of {x: 0, y: 0, z: 0, w: 1} is considered to be
"forward." May be null if the sensor is incapable of providing orientation data.

<dfn attribute for="VRPose">angularVelocity</dfn>
Angular velocity of the sensor at {{timestamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing angular velocity.

<dfn attribute for="VRPose">angularAcceleration</dfn>
Angular acceleration of the sensor at {{timestamp}}. The w component MUST be 0.
May be null if the sensor is incapable of providing angular acceleration.

